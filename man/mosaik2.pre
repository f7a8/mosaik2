.TH "mosaik2" "1" "$DATE$" "mosaik2 $VERSION$" "mosaik2 Documentation"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '

.SH "NAME"
mosaik2 \- creates real photo mosaics. ready for large data sets. 
.SH "SYNOPSIS"
.PP
\fBmosaik2\fR init       [-V|-q] [-r <PIXEL>] [-c <SPACE>] \fImosaik2db\fR
.br
\fBmosaik2\fR index      [-V|-q] [-j <COUNT>] [-l <LOAD>] \fImosaik2db\fR < \fIfile-list\fR
.PP
\fBmosaik2\fR gathering  [-V|-q] [-t <NUM>] [-u|-U] [-R <PERCENT>] [-D <DIST>] \fIdest-image\fR \fImosaik2db\fR < \fIsrc-image\fR
.br
\fBmosaik2\fR join       [-V|-q] [-p <PIXEL>] [-s] [-d] \fIdest-image\fR \fImosaik2db\fR-0 [\fImosaik2db\fR-N ...]
.PP
\fBmosaik2\fR duplicates [-V|-q] [-i] [-y] [-P <DIST>] \fImosaik2db\fR-src [\fImosaik2db\fR-dest]
.br
\fBmosaik2\fR invalid    [-V|-q] [[-i] [-y] [-n] | -e <SEARCH>] \fImosaik2db\fR
.br
\fBmosaik2\fR info       [-V|-q] (-e <SEARCH> | \fIsrc-image\fR -t <NUM>) \fImosaik2db\fR
.br
\fBmosaik2\fR crop       [-V|-q] -e <SEARCH> -t <NUM> \fImosaik2db\fR
.br
\fBmosaik2\fR (-h|-v)
.SH "VERSION"
.PP
This manual documents mosaik2 $VERSION$
Compile-time switches in this build:
.RS 4
.br
libcurl remote file support: $MAN_CURL$
.br
libexif handle rotated images support: $MAN_EXIF$
.br
libpHash handle similar images support: $MAN_PHASH$
.RE
.SH "DESCRIPTION"
.PP
mosaik2 is a Command Line Interface program for Linux, especially designed for large amounts of data.
.PP
\fBinit\fR mode creates a new mosaik2 database directory with all necessary (mostly empty) files. It may be useful to create several database directories to reduce the amount of data per database using a suitable sorting criteria. Suitable can be for example the year, or a directory path of your source images. This allows you to run multiple indexing and gathering processes in simultaneously. Here the resolution of the images is set in the database and cannot be changed later.
.PP
The \fBindex\fR mode processes all input images from the file-list and saves the results to the mosaik2 database.
.PP
If your indexing gets stuck due to any imponderables, you can safely cancel the process by pressing Ctrl+C. The program will terminate only after all started tiler processes are finished. The error message or the number of lines in the mosaik2db/filenames.txt betrays the line offset, which can be selected at a indexing restart. The offset of the file list can be easily achieved with the process substitution, instead of "< file_list" type "< <(tail -n +K \fIfile_list\fR)" where K is the line offset.
.br
For now a single database can have size_t-1 entries. The indexing will stop after reaching this limit and give you an appropiate message.
.PP
After your mosaik2 database(s) have been created, you can start to work on your individual mosaics. First you have to analyze your mosaic motive with any mosaik2 database you want to use in the \fBgathering\fR mode. Normally, the best matching square crop used from all candidates. With the \fBcrop\fR mode, the crops of individual images can be changed manually. If you create several mosaik2 databases, different \fItile-resolutions\fR can be chosen. 
.PP
The \fBjoin\fR mode merges the gathered intermediate results from different mosaik2 databases with the same resolution will finally create the desired mosaic. After the candidates have been identified, they are saved into ~/.mosaik2. This brings you in a better position, if you create several mosaics with different properites, a lot of images will be reused, and a download for example can be avoided.

The \fBduplicates\fR mode indentifies candidate images, that appear multiple times in your mosaik2 database, and mark all but the first occurance as invalid. This mode prints the invalidated candidates to stdout. Option dry-run makes no modification to the mosaik2 database. Duplicate images will only be saved in mosaik2db-dest. If you want to save them vice versa, you have to switch the order of mosaik2db arguments. If you want to eliminate just duplicates in one mosaik2db itself, then let mosaik2db-src and mosaik2db-dest point to the same destination or omit mosaik2db-dest. You may also want to have a look on the perceptual hash argument -P, which can also find similar duplicates (optional feature, $MAN_PHASH$ in this build).
.PP
Your image collection will be changed from time to time, which means some images were renamed, removed or their file content has changed. mosaik2 databases can run out of sync, which may lead to wrong or missing tiles. The \fBinvalidate\fR mode takes this into account due comparing all images candidates by accessiable, last modification timestamps, filesizes and file hashes. Your mosaik2 database will ignore those invalidated candidates in further \fBgathering\fR operations, which will lead to a lower effective candidates number. This mode prints the invalidated files to stdout.
.br
You are allowed to mark manually the invalid state of single database elements, back and forth. If the entire database is checked for invalid values, those marks have priority over manual ones.
.br
You may want to take a look at the \fBFILE LIST\fR section how to identify the difference between the last state of the mosaik2 database to append it to the old database or to create a new one.
.PP
To \fBinfo\fR mode serves several informations about the database or an individial database element or applying a src_image to the mosaik2 database. Every type includes a poor boys histogram, which is more an average over the RGB colors and its standard derivation. When applying the src_image two numbers (histogram_color_similarity, histogram_stddev_similarity) can help to get a rough guess, if the database content will lead to good result with this src_image. Lower values are better.
.PP
.SH "OPTIONS"
.PP
\fImosaik2db\fR
.RS 4
The path of the directory, that points to a mosaik2 database. During the \fBinit\fR part, the directory must not exist and will be created.
.RE
.PP
\fIfile-list\fR
.RS 4
text data, which contains filename, filesize and timestamp of all images which should be indexed. How to create a list in the right format is decribed in the section \fBFILE LIST\fR.
.RE
.PP
\fIsrc-image\fR
.RS 4
The image data that is the motif for the photo mosaic.
.RE
.PP
\fIdest-image\fR
.RS 4
The path to the photo mosaic which to create. The link between the gathering and join mode is using the same dest-image. Additional files are created, which serve serveral statistics, like <dest-image>.html and <dest-image>.src. 
.RE
.PP
\fB-d\fR
.RS 4
Fast but slight reduction of duplicates images. When N mosaik2dbs are used the duplication can be reduced by N-1. Three mosaik2dbs can reduce seven duplicates to four.
.RE
.PP
\fB-D\fR color-distance-method
.RS 4
Specifies the method of determining similar colors. Possible values are \fBmanhattan\fR (default), \fBeuclidian\fR and \fBchebyshev\fR.
.PP
\fBmanhattan\fR is probably the best tradeoff between speed and accuracy, which is the sum of the absolute differences of their Cartesian coordinates. Violett in RGB is 161,70,255 and a comparison color may 159,71,255 the Manhattan distance would be 3.
.br
\fBeuclidian\fR distance should be more accurate but is less fast, which is the length of a line segment between the two points. The above example colours √((159-161)²+(71-70)²+(255-255)²) which is ~ 2.23.
.br
The \fBchebyshev\fR distance is the fastest but most inaccurate method, where the distance between two vectors is the greatest of their differences along any coordinate dimension. Same example results to 2 because 159-161 has the absolute value of 2. 71-70 which would be 1 is dropped because it is lower than 2.
.RE
.PP
\fB-e\fR search
.RS 4
Execute the MODE only for a specific database candidate and not for the entire database. Searching can be done with the element number (first one starts with 1) or the file name as it was indexed. File names are found by matching from the beginning, the end can be omitted. For example: Entry 1: "../pic2.jpg", Entry 2: "../pic1.jpg". Search for "pic" finds no file, because no matching beginning. Search for "../pic" finds "../pic2.jpg", because first hit. Search for "../pic1.jpg" finds "../pic1.jpg" as expected.
.RE
.PP
\fB-h\fR
.RS 4
print short help and exit
.RE
.PP
\fB-i\fR
.RS 4
Ignore-old-invalids: this compares all files again with their original source if set, otherwise only valid files are compared.
.RE
.PP
\fB-j\fR max-tiler
.RS 4
The number of concurrent worker jobs, which (down)load and index in parallel. Default value is the number of CPU cores available, because the worker jobs are subprocesses.
.RE
.PP
\fB-l\fR max-load
.RS 4
The maximum system load value as integer value. Default value is 0, which means unset. If the maximum system load exceeds, concurrent worker jobs are limited to 1.
.RE
.PP
\fB-n\fR
.RS 4
No-hash-cmp: while checking all images in the mosaik2db, omit the file content comparison through hash compare. This is the quicker but less accurate method, which only checks image resource availability, timestamps and file sizes.
.RE
.PP
\fB-p\fR pixel-per-tile
.RS 4
Each original image is reduced to squared \fIpixel-per-tile\fR pixels. The default value is 200 px. This value controls the resulting total image size. Multiply pixel-per-tile with num-tile results to the pixel size at the smaller dimension.
.RE
.PP
\fB-P\fR perceptual-hash-similarity-distance (optional feature, $MAN_PHASH$ in this build)
.RS 4
Each candidate is not only compared for exact equalness like same timestamp, filesizes and file hash, with this option image content are compared to similar image contents. This phash DCT algorithm (phash.org/) can detect sligthy changed images, like a resaved jpegs, tiny cropped images or changed color settings. The underlying library, which accepts distance values from 1 to 32. Try low values first, and check, if they fit to your needs (you may want to use the -y option to test serveral phash-distance values, before saving it permanenty and -V will print both candidates, make it possible to comapare them manually).
.br
To preserve color diversity, those candidates are marked as duplicates which colors are closer to the mean color of the mosaik2 database.
.RE
.PP
\fB-r\fR database-image-resolution
.RS 4
Each image is reduced to \fIdatabase-image-resolution\fR pixels at its smaller dimension. The aspect ratio is obtained. Images that exceed a reduced database-image-resolution of 256 in width or height are ignored. The larger this database-image-resolution number, the more exactly image candidates will fit in the mosaic, the longer the computation time. The maximum database-image-resolution is 256. If 16 is chosen, the maximum aspect ratio is 16:256 => 1:16, which should match most panorama images. If a image-resolution of 128 is chosen, the maximum aspect ratio is 128:256 => 1:2, which will process most common image formats, but all panoramas will be ignored.
.br
In an existing mosaik2 database the \fIdatabase-image-resolution\fR cannot be changed.
.PP
Example of an expected database size: from 2003 to 2019, there are about 53 million JPEG images in Wikimedia Commons, occupying a storage size of about 165 TB. At a image-resolution of 16, the resulting mosaik2 database size was 130 GB.
.RE
.PP
\fB-R\fR color-stddev-ratio
.RS 4
Ratio between color matching and color standard devation. Only color matching is 100 (default), only stddev color matching is 0.
.RE
.PP
\fB-s\fR
.RS 4
Controls the caching strategy. If omitted files are copied to the cache directory ~/.mosaik2/, which should be advantageous for downloaded data. But this option can create symlinks instead of copies, if files are local.
.RE
.PP
\fB-t\fR src-image-resolution
.RS 4
\fBgathering\fR mode: The \fIdest-image\fR will be created out of \fIsrc-image-resolution\fR images at its smaller dimension (default value is 20). The aspect ratio is obtained. The image-resolution of the src-image must be greater than image-resolution multiplied by src-image-resolution. For example: the database-image-resolution is 16 and your choosen src-image-resolution is 40, so the smaller dimension of your src-image has to be 640 pixel at least. Most images have a aspect ratio from 3:4, here such an image must have at least 640 x 853 pixel image dimension.
.PP
\fBcrop\fR mode: sets a specific offset to a database entry. 255 will unset the offset.
.br
Example: Common image formats are reduced to 22x16 if the \fIdatabase-image-resolution\fR was set to 16. Then only a 16x16 image section will used to find the best candidate, which will later be placed at this position. Here you can define which of the 6 possible 16x16 image sections to take. In this case valid values are from 0 to 5.
.RE
.PP
\fB-u\fR
.RS 4
Unique: Ensures that candidates appear only once in the dest-image.
.br
This option can use a lot amount of memory, and may take more time to compute. On the other hand, this should bring the best mosaic compositions.
.br
This method works like this: Every candidates score is calculated and saved for every tile. Not only the best candidate per tile is stored, but per tile as many best candidates are stored as there are tiles. This inflated number of best candidates is necessary because eliminating duplicate candidates in the worst case completely wears them out.
.br
For example an mosaic with the src-image-resolution of 30 with an aspect ratio of 4:3 will have 40x30 tiles. N would be 1200 in this case. To memory requirements for -u would be 1200*1200*16B which would be 21MB. A src-image-resolution of 300 will need 214GB just for uniqueness.
.br
If an candidate has been indexed twice, e.g. because there was an old backup somewhere, it can also appear also up to two times in the dest-image. You can prevent duplicates with the \fBduplicates\fR mode.
.RE
.PP
\fB-U\fR
.RS 4
Fast-Unique: Like the -u option, but uses much less memory and is almost as fast as without -u.
.br
The more the number of candidates exceeds the number of tiles in the mosaic, the better the result will be. If both are about the same size, the mosaic can become disappointing.
.br
This method works like this: First the images of the database are placed in the empty tiles where they fit best, then the images are placed only in the places where they bring the biggest improvements.
.RE
.PP
\fB-v\fR
.RS 4
Print program version and exit
.RE
.PP
\fB-y\fR
.RS 4
Dry-run: outputs invalids or duplicates as desired, but won't save it to the mosaik2db.
.RE
.PP
.SH "FILE LIST"
If you want to index a bunch of images its is needed to create an input stream 
to mosaik2 in the simple text format

file_link{LINEBREAK}
[...]
.br
\.\.\.
.PP
.RS 4
* file_link means an absolute or relative filepath on your local machine or an url (remote files are are an optional feature, $MAN_CURL$ in this build).
.
.RE
.PP
You can either write your own program to create that list on the fly and pipe 
it to the index process or you can use the find program to create a static file
on disk, which you take as stdin to the index process. The file list can be 
created like this:
.PP
find /root_dir -type f -iregex ".*\e.jpe?g$" -size +10000c -size -100000000c >  first_mosaik2.file_list
.PP

.SH "EXIT STATUS"
.PP
In case of an error the exit code is always 1, 0 otherwise. The program tries to exit fast with an appropriate stderr message.

.SH "EXAMPLE"
.PP
find ~/Pictures -type f -iregex ".*\e.jpe?g$" -size +10000c -size -100000000c >  first_mosaik2.file_list
.br
mosaik2 init first_mosaik2_db
.br
mosaik2 index first_mosaik2_db < first_mosaik2.file_list
.br
mosaik2 duplicates mosaik2_db
.br
mosaik2 gathering my_first_mosaik2.jpeg first_mosaik2_db < source_image.jpeg
.br
mosaik2 join my_first_mosaik2.jpeg first_mosaik2_db

.SH "FILES"
.PP
mosaik2 database files are:
.PP
NOTE: all element entries in the following files are ordered as their result was available during the index operation, except .idx files may have special orders.
.RS 4
mosaik2db/dbversion.txt
.br
mosaik2db/duplicates.bin
.br
mosaik2db/filehashes.bin
.br
mosaik2db/filehashes.idx
sorted filehashes.bin for faster duplication lookup
.br
mosaik2db/filenames.txt
.RS 6
all processed image filenames with their original path in the order their indexing processes. New line seperates the entries.
.RE
.br
mosaik2db/filenames.idx
long integers containing the byte offset if their corresponding filename entries in filenames.txt.
.br
mosaik2db/filesizes.bin
.br
mosaik2db/id.txt
.br
mosaik2db/imagecolors.bin
.br
mosaik2db/imagedims.bin
.br
mosaik2db/imagestddev.bin
.br
mosaik2db/image.idx
.RS 6
long integers containing the byte offset for their relational partner element in imagecolors.bin and imagestddev.bin. Without this information you have to compute the correct data frame through multiply all tile dimension (tiledims.bin) of all elements before.
.RE
.br
mosaik2db/invalid.bin
.br
mosaik2db/phash.bin
.RS 6
per candidates one uint64_t perceptual hash, which are the results of the ph_dct_imagehash(char*, ulong64)
.RE
.br
mosaik2db/README.txt
.br
mosaik2db/tilecount.txt
.br
mosaik2db/tiledims.bin
.br
mosaik2db/tileoffsets.bin
.RS 6
Provides user defined crops of images. Default unset value is 0xFF for width and 0xFF for height dimension. If unset the gathering mode will detect the best matching crop, which may have undesired effects because of truncated main motives. Any image can save here its special tile offsets. Defined entries should have at least one zero, because one dimension is always the narrow side where no scrolling is possibile. 
.RE
mosaik2db/timestamps.bin
.RE
.PP
mosaik2 project files (here for the my_first_mosaik2.jpeg) are
.RS 4
my_first_mosaik2.jpeg
.RS 6
The desired photo mosaic result image.
.RE
.br
my_first_mosaik2.jpeg.src
.RS 6
A text file of all images used in the photo mosaic, sorted by position, starting top left. Every new image row leads to an empty line.
.RE
.br
my_first_mosaik2.jpeg.html
.RS 6
The photo mosaic in table form with image displays.
.RE
.br
my_first_mosaik2.jpeg.result
.RS 6
Save the best candidates from the gathering mode.
.RE
.br
my_first_mosaik2.jpeg.mtileres
.RS 6
Saves the num_tiles property of the database.
.RE
.RE

.SH "NOTES"
.PP
website at https://f7a8.github.io/mosaik2/
